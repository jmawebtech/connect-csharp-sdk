/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// An image file to use in Square catalogs. Can be associated with catalog items, item variations, and categories.
    /// </summary>
    [DataContract]
    public partial class CatalogImage :  IEquatable<CatalogImage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogImage" /> class.
        /// </summary>
        /// <param name="Name">The internal name of this image. Identifies this image in calls to the Connect APIs..</param>
        /// <param name="Url">The URL of this image. Generated by Square after an image is uploaded to the CreateCatalogImage endpoint..</param>
        /// <param name="Caption">A caption that describes what is shown in the image. Displayed in the Square Online Store..</param>
        public CatalogImage(string Name = default(string), string Url = default(string), string Caption = default(string))
        {
            this.Name = Name;
            this.Url = Url;
            this.Caption = Caption;
        }
        
        /// <summary>
        /// The internal name of this image. Identifies this image in calls to the Connect APIs.
        /// </summary>
        /// <value>The internal name of this image. Identifies this image in calls to the Connect APIs.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The URL of this image. Generated by Square after an image is uploaded to the CreateCatalogImage endpoint.
        /// </summary>
        /// <value>The URL of this image. Generated by Square after an image is uploaded to the CreateCatalogImage endpoint.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// A caption that describes what is shown in the image. Displayed in the Square Online Store.
        /// </summary>
        /// <value>A caption that describes what is shown in the image. Displayed in the Square Online Store.</value>
        [DataMember(Name="caption", EmitDefaultValue=false)]
        public string Caption { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogImage {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Caption: ").Append(Caption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogImage);
        }

        /// <summary>
        /// Returns true if CatalogImage instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogImage other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Caption == other.Caption ||
                    this.Caption != null &&
                    this.Caption.Equals(other.Caption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Caption != null)
                    hash = hash * 59 + this.Caption.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
